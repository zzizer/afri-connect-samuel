# Generated by Django 4.1.5 on 2023-01-21 17:10

from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('transcripts', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FollowersCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.CharField(max_length=50000)),
                ('user', models.CharField(max_length=50000)),
            ],
            options={
                'verbose_name': 'Follower',
            },
        ),
        migrations.CreateModel(
            name='NewUser',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('user_name', models.CharField(max_length=150, unique=True)),
                ('given_name', models.CharField(blank=True, max_length=100, null=True)),
                ('surname', models.CharField(blank=True, max_length=100)),
                ('telephone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('linkedIn', models.CharField(default='linkedIn.com', max_length=50)),
                ('git_hub', models.CharField(default='github.com', max_length=50)),
                ('you_tube', models.CharField(default='youtube.com', max_length=50)),
                ('instagram', models.CharField(default='instagram.com', max_length=50)),
                ('facebook', models.CharField(default='facebook.com', max_length=50)),
                ('twitter', models.CharField(default='twitter.com', max_length=50)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='')),
                ('about_me', models.TextField(blank=True, null=True)),
                ('physical_address', models.CharField(blank=True, max_length=100, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_business', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_personal', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('education_background', models.ManyToManyField(blank=True, to='transcripts.academicdocument')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('hobby', models.ManyToManyField(blank=True, to='transcripts.hobbies')),
                ('language_spoken', models.ManyToManyField(blank=True, to='transcripts.languagesspoken')),
                ('leadership_skills', models.ManyToManyField(blank=True, to='transcripts.leadershipskills')),
                ('objective', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='transcripts.objective')),
                ('other_document', models.ManyToManyField(blank=True, to='transcripts.otherdocument')),
                ('reference', models.ManyToManyField(blank=True, to='transcripts.references')),
                ('skills', models.ManyToManyField(blank=True, to='transcripts.skills')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('working_experience', models.ManyToManyField(blank=True, to='transcripts.workingexperience')),
            ],
            options={
                'verbose_name': 'New Account / User',
            },
        ),
    ]
